#!/usr/bin/env python
import argparse
import re
import sys
from ConfigParser import SafeConfigParser

def cl_mgmtvrf_enabled(mgmt_vrf_name):
    try:
        output = subprocess.check_output(shlex.split(''.join(["/sbin/ifquery --allow=", mgmt_vrf_name])), shell = False, stderr=subprocess.STDOUT)
        for line in output.splitlines():
            match = re.search('iface ([a-zA-Z0-9_\.]+)', line.strip())
            if match:
                ifname = match.group(1)
            if line.strip() == "vrf %s" % mgmt_vrf_name:
                return ifname 
        return None
    except Exception, e:
        return None

def enable():
    sys.stdout.write("""
Management VRF is configured by adding the following stanza to
/etc/network/interfaces

    auto mgmt
    iface mgmt
        address 127.0.0.1/8
        vrf-table auto
        vrf-default-route no

And then adding 'vrf mgmt' to the interface stanza. For example,
    auto eth0
    iface eth0 inet dhcp
        vrf mgmt

Remember to add 'table mgmt' to all static routes. Use 'ifreload -a'
to have the new configuration take effect.

NOTE: When enabling management VRF any active sessions over the
      management interface need to be restarted.

""")
    sys.exit(1)

def disable():
    sys.stdout.write("""
Management VRF is disabled by removing the 'iface mgmt' stanza to
/etc/network/interfaces, and then removing 'vrf mgmt' from the
interface stanza for eth0.

Use 'ifreload -a' to have the new configuration take effect.

NOTE: When disabling management VRF any active sessions over the
      management interface need to be restarted.

""")
    sys.exit(1)

if __name__ == '__main__':

    parser  = argparse.ArgumentParser(description='Configure management VRF')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-e', '--enable', help='Enable management VRF', action='store_true')
    group.add_argument('-d', '--disable', help='Disable management VRF', action='store_true')
    group.add_argument('-s', '--status', help='Display if management VRF is enabled', action='store_true')
    parser.add_argument('interface', nargs ='?', help='Set management interface', action = 'store', default='eth0')
    args = parser.parse_args()

    if args.status:
        interface = cl_mgmtvrf_enabled('mgmt')
        if not interface:
            sys.stdout.write('Management VRF is NOT enabled\n')
            sys.exit(1)
        else :
            sys.stdout.write('Management VRF is enabled for \'%s\'\n' %interface)
            sys.exit(0)

    if args.enable:
        enable()
    elif args.disable:
        disable()
    else:
        sys.stdout.write('ERROR: %s' % parser.format_help())
        sys.exit(1)
