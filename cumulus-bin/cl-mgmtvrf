#!/usr/bin/env python
import argparse
import logging
import os
import re
import subprocess
import sys
import shutil
import shlex
from ConfigParser import SafeConfigParser

iface_by_name = {}
iface_by_index = {}

def valid_interface(ifname):
    if ifname in iface_by_name:
        return True
    return False

def cl_mgmtvrf_enabled(mgmt_vrf_name):
    try:
        output = subprocess.check_output(shlex.split(''.join(["/sbin/ifquery --allow=", mgmt_vrf_name])), shell = False, stderr=subprocess.STDOUT)
        for line in output.splitlines():
            match = re.search('iface ([a-zA-Z0-9_\.]+)', line.strip())
            if match:
                ifname = match.group(1)
            if line.strip() == "vrf %s" % mgmt_vrf_name:
                return ifname 
        return None
    except Exception, e:
        return None


def cl_ns_mgmt_enabled(mgmt_vrf_name):
    """
    Return True if the user is using cl-ns-mgmt
    """
    output = subprocess.check_output(["/sbin/ip", "netns", "list"], stderr=subprocess.STDOUT)

    for line in output.splitlines():
        if line == mgmt_vrf_name:
            return True

    return False


def cl_mgmtvrf_enabled_for_iface(ifname, mgmt_vrf_name):
    """
    Return True if Management VRF is enable for 'ifname'
    """
    try:
        for line in subprocess.check_output(["/sbin/ifquery", ifname], stderr=subprocess.STDOUT).splitlines():
            if line.find('vrf') and line.find(mgmt_vrf_name) != -1:
                return True
        return False
    except Exception, e:
        return False


def log_error_and_exit(msg):
    log.error(msg)
    sys.stdout.write('%s\n' % msg)
    sys.exit(1)

def enable(ifname, mgmt_vrf_name, mgmt_vrf_table):
    mgmtvrf_inf = cl_mgmtvrf_enabled(mgmt_vrf_name)
    if not mgmtvrf_inf:
        log.info("enable for %s" % mgmtvrf_inf)

        with open('/etc/network/interfaces.d/mgmt-vrf.cl', 'w') as fh:
            fh.write("allow-%s %s\n" % (mgmt_vrf_name, ifname))
            fh.write("auto %s\n" % mgmt_vrf_name)
            fh.write("iface %s\n" % mgmt_vrf_name)
            fh.write("\taddress 127.0.0.1/8\n")
            fh.write("\tvrf-table %s\n" % mgmt_vrf_table)
            fh.write("\tvrf-default-route no\n")
            fh.write("\n")
            fh.write("allow-%s %s\n" % (mgmt_vrf_name, ifname))
            fh.write("auto %s\n" % ifname)
            fh.write("iface %s\n" % ifname)
            fh.write("\tvrf %s\n" % mgmt_vrf_name)

        for (cmd, use_shell) in (
            (["grep '^#source /etc/network/interfaces.d/mgmt-vrf.cl' /etc/network/interfaces && sed 's/^#source\s\/etc\/network\/interfaces\.d\/mgmt-vrf\.cl/source \/etc\/network\/interfaces\.d\/mgmt-vrf\.cl/' -i /etc/network/interfaces || sed '$ a\source /etc/network/interfaces.d/mgmt-vrf.cl' -i /etc/network/interfaces"], True),
            (["/sbin/ifup --allow=%s" % mgmt_vrf_name], False),
            (["/sbin/ifdown %s && /sbin/ifup %s && /sbin/ifup %s" %(ifname, mgmt_vrf_name, ifname)], True)):
            try:
                log.info(' '.join(cmd))

                if use_shell:
                    output = subprocess.check_output(' '.join(cmd), shell=True, stderr=subprocess.STDOUT)
                else:
                    output = subprocess.check_output(shlex.split(''.join(cmd)), shell=False, stderr=subprocess.STDOUT)

                log.debug(output)

            except subprocess.CalledProcessError as e:
                log.error(e)
    else:
        log_error_and_exit('Management VRF is already enabled for interface %s, nothing to do' % mgmtvrf_inf)

def disable(mgmt_vrf_name):
    interface = cl_mgmtvrf_enabled(mgmt_vrf_name)
    if interface:
        log.info("disable for %s" % interface)
        try:
            log.info(''.join(["/sbin/ifdown --allow=", mgmt_vrf_name]))
            output = subprocess.check_output(shlex.split(''.join(["/sbin/ifdown --allow=", mgmt_vrf_name])), shell = False, stderr=subprocess.STDOUT)
            log.debug(output)

        except subprocess.CalledProcessError as e:
            log.error(e)

        for cmd in (
        ["grep '^source /etc/network/interfaces.d/mgmt-vrf.cl' /etc/network/interfaces && sed 's/^source\s\/etc\/network\/interfaces\.d\/mgmt-vrf\.cl/#source \/etc\/network\/interfaces\.d\/mgmt-vrf\.cl/' -i /etc/network/interfaces"],
        ["'/sbin/ifdown %s && /sbin/ifdown %s /sbin/ifup %s'" % (mgmt_vrf_name, interface, interface)]):
            try:
                log.info(' '.join(cmd))
                output = subprocess.check_output(' '.join(cmd), shell=True, stderr=subprocess.STDOUT)
                log.debug(output)

            except subprocess.CalledProcessError as e:
                log.error(e)


if __name__ == '__main__':

    parser  = argparse.ArgumentParser(description='Configure management VRF')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-e', '--enable', help='Enable management VRF', action='store_true')
    group.add_argument('-d', '--disable', help='Disable management VRF', action='store_true')
    group.add_argument('-s', '--status', help='Display if management VRF is enabled', action='store_true')
    parser.add_argument('interface', nargs ='?', help='Set management interface', action = 'store', default='eth0')
    args = parser.parse_args()
    mgmt_interface = args.interface 
    #Hard-coding MGMT_VRF name and MGMT_TABLE id
    mgmt_vrf_name = 'mgmt'
    mgmt_vrf_table = 252

    # Verify user is root or using sudo...do not use log_error_and_exit()
    # here because if we are non-root we will not have permissions to write
    # to the log file
    euid = os.geteuid()
    if euid != 0:
        sys.stdout.write('ERROR: You must be root to run this script\n')
        sys.exit(1)

    logfile = '/var/log/cl-mgmtvrf.log'
    logging.basicConfig(filename=logfile,
                        level=logging.DEBUG,
                        format='%(asctime)s %(levelname)8s: %(message)s')
    log = logging.getLogger(__name__)
        
    # Build dictionaries of all interfaces by name and by index
    for line in subprocess.check_output(["/sbin/ip", "--oneline", "link", "show"]).splitlines():
        re_swp = re.match('^(\d+):\s+(\S+): ', line)
        if re_swp:
            ifindex = int(re_swp.group(1))
            ifname = re_swp.group(2)
            iface_by_name[ifname] = ifindex
            iface_by_index[ifindex] = ifname

    if args.status:
        interface = cl_mgmtvrf_enabled(mgmt_vrf_name)
        if not interface:
            sys.stdout.write('Management VRF is NOT enabled\n')
            sys.exit(1)
        else :
            sys.stdout.write('Management VRF is enabled for \'%s\'\n' %interface)
            sys.exit(0)

    # Don't cross the streams
    # -Dr. Egon Spengler
    if cl_ns_mgmt_enabled(mgmt_vrf_name):
        log_error_and_exit('ERROR: cl-ns-mgmt and Management VRF cannot be used at the same time')


    # NOTE: originally we allowed the user to specify the interface via the
    # command line but we removed that option and only allow eth0 for now.
    # It can't hurt to verify that eth0 is present.
    #
    # Verify the interface specified is valid
    if not valid_interface(mgmt_interface):
        log_error_and_exit('ERROR: %s is not a valid interface' % mgmt_interface)


    if args.enable:
        enable(mgmt_interface, mgmt_vrf_name, mgmt_vrf_table)
    elif args.disable:
        disable(mgmt_vrf_name)
    else:
        log_error_and_exit('ERROR: %s' % parser.format_help())

