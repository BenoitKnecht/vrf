/usr/cumulus/bin/cl-vrf mgmt status >/dev/null 2>&1
[ $? -ne 0 ] && exit 0

MGMT_TABLE=$(/usr/cumulus/bin/cl-vrf mgmt table)

# Cleanup DNS state
if [ -n "$old_domain_name_servers" ]; then
    # Delete rules associated with old DNS server
    for dns in $old_domain_name_servers; do
        ip rule del to $dns lookup mgmt prio 99 1>/dev/null 2>&1
    done
fi

# Add rules to handle DNS server
if [ -n "$new_domain_name_servers" ]; then
    for dns in $new_domain_name_servers; do
        ip rule add to $dns lookup mgmt prio 99 1>/dev/null 2>&1
    done
fi

case "$reason" in
    BOUND|RENEW|REBIND|REBOOT)
        if [ -z "$old_ip_address" ] ||
           [ "$old_ip_address" != "$new_ip_address" ] ||
           [ "$reason" = "BOUND" ] || [ "$reason" = "REBOOT" ]; then
	    # if we have $new_rfc3442_classless_static_routes then we have to
	    # ignore $new_routers entirely
	    if [ ! "$new_rfc3442_classless_static_routes" ]; then
		    # set if_metric if IF_METRIC is set or there's more than one router
		    if_metric="$IF_METRIC"
		    if [ "${new_routers%% *}" != "${new_routers}" ]; then
			if_metric=${if_metric:-1}
		    fi

		    for router in $new_routers; do
			if [ "$new_subnet_mask" = "255.255.255.255" ]; then
			    # point-to-point connection => set explicit route
			    ip -4 route add table ${MGMT_TABLE} ${router} dev $interface >/dev/null 2>&1
			fi

			# set default route
			ip -4 route add table ${MGMT_TABLE} default via ${router} dev ${interface} \
			    ${if_metric:+metric $if_metric} >/dev/null 2>&1

			if [ -n "$if_metric" ]; then
			    if_metric=$((if_metric+1))
			fi
		    done
	    fi
        fi

        if [ -n "$alias_ip_address" ] &&
           [ "$new_ip_address" != "$alias_ip_address" ]; then
            ip -4 route add table ${MGMT_TABLE} ${alias_ip_address} dev ${interface} >/dev/null 2>&1
        fi
        ;;

    EXPIRE|FAIL|RELEASE|STOP)
        if [ -n "$alias_ip_address" ]; then
            ip -4 route add table ${MGMT_TABLE} ${alias_ip_address} dev ${interface} >/dev/null 2>&1
        fi

        ;;

    TIMEOUT)
        # if there is no router recorded in the lease or the 1st router answers pings
        if [ -z "$new_routers" ] || ping -q -c 1 "${new_routers%% *}"; then
	    # if we have $new_rfc3442_classless_static_routes then we have to
	    # ignore $new_routers entirely
	    if [ ! "$new_rfc3442_classless_static_routes" ]; then
		    if [ -n "$alias_ip_address" ] &&
		       [ "$new_ip_address" != "$alias_ip_address" ]; then
			ip -4 route add table ${MGMT_TABLE} ${alias_ip_address} dev ${interface} >/dev/null 2>&1
		    fi

		    # set default route
		    for router in $new_routers; do
			ip -4 route add table ${MGMT_TABLE} default via ${router} dev ${interface} \
			    ${if_metric:+metric $if_metric} >/dev/null 2>&1

			if [ -n "$if_metric" ]; then
			    if_metric=$((if_metric+1))
			fi
		    done
	    fi
        fi

        ;;
esac
