#!/bin/bash

# Generate systemd files for running a systemd-based service
# in a VRF. Generator creates instance templates for services
# that do not have them and creates unit overrides to prepend
# 'vrf exec %I' to all Exec lines.

PROG=systemd-vrf-generator

# config file noting services that might run in a VRF
VRFCONF=/etc/vrf/systemd.conf

# where to find systemd service files
SYSTEMD_SVC=/lib/systemd/system

# where to write the instance service files created
# by this generator
SYSTEMD_ETC=/etc/systemd/system
SYSTEMD_RUN=/run/systemd/system

VRFGEN_NOTE="created by vrf generator"

do_cleanup()
{
	local dest=${1}
	local file

	grep -d skip -l "${VRFGEN_NOTE}" ${SYSTEMD_ETC}/*.service | \
	while read file
	do
		/bin/rm -f ${file}
	done

	grep -r -l "${VRFGEN_NOTE}" ${dest} | \
	while read file
	do
		/bin/rm -f ${file}
	done
}

EXEC_DIR=

directive_seen()
{
	local d

	for d in $EXEC_DIR
	do
		[ "$d" = "$1" ] && return 0
	done

	EXEC_DIR="$EXEC_DIR $1"

	return 1
}

create_instance()
{
	local dest=${1}
	local s=${2}
	local sa=${s//@}
	local d
	local force_ifile="no"

	local file=${SYSTEMD_SVC}/${s}.service
	local ifile=${SYSTEMD_SVC}/${sa}@.service
	local vrffile=${SYSTEMD_ETC}/${sa}@.service
	local vrfunit=${dest}/${sa}@.service.d

	# no service file, nothing to do -- maybe the package
	# has not been installed yet
	[ ! -e ${file} -a ! -e ${ifile} ] && return

	# some instance files are known not to work with the VRF
	# use of instance; ignore those and generate a VRF one
	case ${sa} in
		ssh) force_ifile="yes"
		     vrffile=${SYSTEMD_RUN}/${sa}@.service
		     ;;
	esac

	# if service brings along its own instance file no
	# need to create one
	if [ -e ${ifile} -a ${force_ifile} != "yes" ]; then
		file=${ifile}
	else
		echo "# ${VRFGEN_NOTE}" > ${vrffile}
		cat ${file} >> ${vrffile}

		ifile=${vrffile}
	fi

	# for each Exec line in the service handle prepend vrf exec.
	# Keep the '-' and '@' characters after the '=' if applicable.
	# Commands must be absolute path which allows parsing on the '/'
	mkdir -p ${vrfunit}
	(
	echo "# ${VRFGEN_NOTE}"
	echo "[Unit]"
	echo "SourcePath=${file}"
	echo "After=network-online.target networking.service"
	echo
	echo "[Service]"
	while read line; do
		if [[ $line =~ ("Exec".*=[[:space:]]*[^/]*)(\/.*) ]]; then
			# directive is the part before the '='
			set -- ${BASH_REMATCH[1]/=*}
			d=${1}

			# only write reset for directive first time we see it
			directive_seen ${d}
			[ $? -eq 1 ] && echo "${d}="

			# use full match here to keep all context
			echo "${BASH_REMATCH[1]}/usr/bin/vrf task exec %I ${BASH_REMATCH[2]}"
		fi
	done < ${ifile}

	) > ${vrfunit}/vrf.conf
}

# take the normal-dir for writing our temp files
dest=${1}

# remove old files
do_cleanup ${1}

[ ! -e ${VRFCONF} ] && exit 0

while read service
do
	# skip comments and blank lines
	[ -z "${service}" -o "${service:0:1}" = "#" ] && continue

	create_instance ${dest} ${service}
done < ${VRFCONF}

exit 0
